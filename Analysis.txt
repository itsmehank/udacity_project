Big O Notation 

----------------------------------------------------------------------------------------------------------------------------------------------------------------------
[Task0.py]

def first_record(data):                  
     first_income = str(data[0][0])                                  # indexing and conversion specific data to string are all O(1)  
     first_answer = str(data[0][1])                                  # ditto 
     first_time = str(data[0][2])                                     # ditto
     return ("First record of text " + first_income + ' texts ' + first_answer + ' at time '+ first_time)         #O(1)
    
####  Time complexity = O(1) + O(1) + O(1) + O(1)  -> O(1)


def last_record(data):
     last_income = str(data[-1][0])                       # indexing and conversion specific data to string are all O(1)
     last_answer = str(data[-1][1])                       # ditto
     last_time = str(data[-1][2])                          # ditto
     calling_time = str(data[-1][3])                      # ditto
     return ("Last record of calls " + last_income + ' calls ' + last_answer + ' at time '+ last_time + ", lasting " + calling_time + " seconds")           # O(1)

####  Time complexity = O(1) + O(1) + O(1) + O(1) + O(1)  -> O(1)


print (first_text(texts))      # O(1)
print (last_call(calls))        # O(1)

#### Time complexity = O(1) + O(1)   ->  O(1)



---------------------------------------------------------------------------------------------------------------------------------------------------------------------

[Task1.py]

def count_unique_number(data1, data2):
     unique_number = set()                                    # making an empty set is O(1)
     for i in data1 + data2:                                     # for-in loop with list is O(N)
         unique_number.add(i[0])                              # add method is O(1)
         unique_number.add(i[1])                              # ditto
     count_number = len(unique_number)                # len is O(1)
     return ("There are "+ str(count_number) + " different telephone numbers in the records.")         #O(1)

#### Time complexity = O(1) + O(N)*(O(1)+O(1)) + O(1) + O(1)  -> O(N)

print(count_unique_number(texts,calls))         #O(N)

---------------------------------------------------------------------------------------------------------------------------------------------------------------------
[Task2.py]

def complete_dict(list):                           
     time_dict = dict()                                                                       # making an empty dict is O(1)
     for data in list:                                                                           # for-in loop with list is O(N)
         time_dict[data[0]] = time_dict.get(data[0], 0) + int(data[3])              # indexing, get method and conversion specific data to integer are all O(1)
         time_dict[data[1]] = time_dict.get(data[1], 0) + int(data[3])              # ditto
     return time_dict                                                                          # O(1)

#### Time complexity = O(1) + O(N)*(O(1) + O(1)) + O(1)  -> O(N)


def longest_number(dict):
     longest_num = 0                                                                    # variable defining is O(1)
     longest_time = 0                                                                    # ditto
     for key in dict:                                                                        # for-in loop with dict is O(N)
         if dict[key] > longest_time or longest_time == 0:                      # indexing, > and == are all O(1)
             longest_time = dict[key]                                                   # variable defining and indexing are all O(1)
             longest_num = key                                                          # variable defining is O(1)
     return  str(longest_num) + " spent the longest time, " + str(longest_time) + " seconds, on the phone during September 2016."       # O(1)

#### Time complexity = O(1) + O(1) +  O(N) * ( O(1) * ( O(1) + O(1) ) ) + O(1)  -> O(N)

print(longest_number(complete_dict(calls))) 

#### Time complexity = O(N) + O(N) -> O(N)

-------------------------------------------------------------------------------------------------------------------------------------------------------------------
[Task3.py]

# Part A

def call_from(code, calls):
    code_set =set()                                                                                  #making an empty set is O(1)
    for data in calls:                                                                                 # for-in loop with list is O(N)
        if data[0][0] == '(' and data[0][1:4] == code:                                       # indexing and == are all O(1)
            if data[1][0] == '(':                                                                      # indexing and == are all O(1)
                temp =''                                                                               # variable defining is O(1)
                for i in range(1,len(data[1])):                                                      # for-in loop with something related with list is O(N)  >> always executed in worst case; use
                    if data[1][i] != ')':                                                                 # indexing and != are all O(1)
                       temp += data[1][i]                                                           # += and indexing are all O(1)
                    elif data[1][i] ==')':                                                              # indexing and == are all O(1)
                        break;                                                                           # O(1)
                code_set.add(temp)                                                                 # add method is O(1)
            elif data[1][0] == '7' or data[1][0] == '8' or data[1][0] == '9':              # indexing and == are all O(1)            >> never executed in worst case; ignore
                code_set.add(data[1][0:4])                                                         # add method and indexing are all O(1) 
            elif data[1][0:3] == '140':                                                              # indexing and == are all O(1)            >>never executed in worst case; ignore
                code_set.add('140')                                                                  # add method is O(1)
    code_list = sorted(list(code_set))                                                             # conversion set to list is O(N) & sorted method is O(N* log N) >> O(N) + O(N*log N) = O(N*log N)
    print ("The numbers called by people in Bangalore have codes:")                 # O(1)
    for num in code_list[:-1]:                                                                       # for-in loop with list is O(N)
        print (num)                                                                                     # O(1)
    return code_list[-1]

#### Time complexity = O(1) + O(N) * (O(1) * (O(1) * (O(1) + O(N)* (O(1) * (O(1)))))) + O(N*Log N) + O(1) + O(N) * O(1) + O(1)  -> O(N^2)


# Part B

def percent_samearea(code):
    total_call = 0                                                                   # variable defining is O(1)
    same_count = 0                                                               # variable defining is O(1)
    for data in calls:                                                               # for-in loop with list is O(N)
        if data[0][0] == '(' and data[0][1:4] == code:                      # indexing and == are all O(1)
            if data[1][0] == '(' and data[1][1:4] == code:                  # ditto
                same_count += 1                                                  # += is O(1)
            total_call += 1                                                          # ditto
    percent = round((same_count / total_call * 100),2)                   # round, dividing, multipling are all O(1)
    return str(percent) + " percent of calls from fixed lines in Bangalore are calls to other fixed lines in Bangalore."  #O(1)

#### Time complexity = O(1) + O(1) + O(N) * (O(1) * (O(1) * (O(1)) + O(1))) + O(1) + O(1) -> O(N)


print(call_from('080',calls))             # O(N^2)
print(percent_samearea('080'))       # O(N)

#### Time complexity = O(N^2) + O(N) -> O(N^2)


---------------------------------------------------------------------------------------------------------------------------------------------------------------
[Task4.py]

def get_tele(calls, texts):
    make_call=set()                                                                       # making an empty set is O(1)
    text_n_receive = set()                                                               # ditto
    for data in calls:                                                                      # for-in loop with list is O(N)
        make_call.add(data[0])                                                          # add method and indexing are all O(1)
        text_n_receive.add(data[1])                                                    # ditto 
    for data in texts:                                                                     # for-in loop with list is O(N)
        text_n_receive.add(data[0])                                                    # add method and indexing are all O(1)
        text_n_receive.add(data[1])                                                    # ditto
    tele_set = make_call - (make_call & text_n_receive)                       # Intersection and Difference are all O(N)   >> O(N) + O(N) = O(N)
    tele_list= sorted(list(tele_set))                                                    # sorted method is O(N*log N) and conversion set to list is O(N)  >> O(N*log N) + O(N) = O(N*Log N)
    print ("These numbers could be telemarketers: ")                          # O(1)
    for num in tele_list[:-1]:                                                            # for-in loop with list is O(N)  and indexing [:-1] is O(N)
        print (num)                                                                        # O(1)
    return tele_list[-1]                                                                    # O(1)

#### Time complexity = O(1) + O(1) + O(N) * (O(1) + O(1)) +O(N) * (O(1) + O(1)) + O(N) + O(N*Log N) + O(1) + O(N)*O(1) + O(1)  -> O(N*Log N)

print(get_tele(calls,texts))         # O(N*Log N)


